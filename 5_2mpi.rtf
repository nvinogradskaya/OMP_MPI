{\rtf1\ansi\ansicpg1251\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red46\green174\blue187;\red159\green160\blue28;\red0\green0\blue0;
\red47\green180\blue29;\red180\green36\blue25;\red200\green20\blue201;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c20196\c73240\c78250;\cssrgb\c68468\c68012\c14208;\csgray\c0;
\cssrgb\c20238\c73898\c14947;\cssrgb\c76409\c21698\c12524;\cssrgb\c83396\c23075\c82664;\csgray\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs22 \cf2 \CocoaLigature0 #include\cf3  <iostream>
\f1\b0 \cf4 \

\f0\b \cf2 #include\cf3  <vector>
\f1\b0 \cf4 \

\f0\b \cf2 #include\cf3  <mpi.h>
\f1\b0 \cf4 \

\f0\b \cf2 #include\cf3  <chrono>
\f1\b0 \cf4 \

\f0\b \cf2 #include\cf3  <random>
\f1\b0 \cf4 \

\f0\b \cf2 #include\cf3  <unistd.h>
\f1\b0 \cf4 \

\f0\b \cf2 #include\cf3  <string>
\f1\b0 \cf4 \
\
\cf5 using\cf4  \cf5 namespace\cf4  std;\
\cf5 using\cf4  \cf5 namespace\cf4  chrono;\
\
random_device rd;\
mt19937 gen(rd());\
uniform_int_distribution<\cf5 short\cf4 > dist(-100, 100);\
\
\cf5 int\cf4  main(\cf5 int\cf4  argc, \cf5 char\cf4 * argv[]) \{\
    MPI_Init(&argc, &argv);\
\
    \cf5 int\cf4  my_rank, world_size;\
    MPI_Comm_rank(
\f0\b \cf6 MPI_COMM_WORLD
\f1\b0 \cf4 , &my_rank);\
    MPI_Comm_size(
\f0\b \cf6 MPI_COMM_WORLD
\f1\b0 \cf4 , &world_size);\
\
    
\f0\b \cf3 for
\f1\b0 \cf4  (\cf5 int\cf4  msg_size = 1; msg_size <= 1000; msg_size *= 10) \{\
        
\f0\b \cf3 for
\f1\b0 \cf4  (\cf5 int\cf4  num_messages = 1; num_messages <= 1000; num_messages *= 10) \{\
            
\f0\b \cf3 for
\f1\b0 \cf4  (\cf5 int\cf4  delay_time = 1; delay_time <= 1000; delay_time *= 10) \{\
                time_point<system_clock, nanoseconds> start_time;\
                
\f0\b \cf3 if
\f1\b0 \cf4  (my_rank == 0) \{\
                    start_time = high_resolution_clock::now();\
                \}\
\
                
\f0\b \cf3 for
\f1\b0 \cf4  (\cf5 int\cf4  j = 0; j < 1000 / world_size; j++) \{\
                    usleep(delay_time);\
                    string send_buffer(msg_size, 
\f0\b \cf7 'a'
\f1\b0 \cf4 );\
                    string recv_buffer(msg_size, 
\f0\b \cf7 ' '
\f1\b0 \cf4 );\
\
                    
\f0\b \cf3 for
\f1\b0 \cf4  (\cf5 int\cf4  i = 0; i < num_messages; i++) \{\
                        MPI_Send(send_buffer.data(), send_buffer.size(), 
\f0\b \cf6 MPI_CHAR
\f1\b0 \cf4 , (my_rank + 1) % world_size, 0, 
\f0\b \cf6 MPI_COMM_WOR
\f1\b0 \cf8 \cb4 >\cf4 \cb1 \
                        MPI_Recv((\cf5 void\cf4  *)recv_buffer.data(), msg_size, 
\f0\b \cf6 MPI_CHAR
\f1\b0 \cf4 , (my_rank > 0 ? my_rank - 1 : world_size - 1),\cf8 \cb4 >\cf4 \cb1 \
                                
\f0\b \cf6 MPI_COMM_WORLD
\f1\b0 \cf4 , 
\f0\b \cf6 MPI_STATUS_IGNORE
\f1\b0 \cf4 );\
                    \}\
                \}\
\
                
\f0\b \cf3 if
\f1\b0 \cf4  (my_rank == 0) \{\
                    \cf5 auto\cf4  end_time = high_resolution_clock::now();\
                    \cf5 auto\cf4  duration = duration_cast<microseconds>(end_time - start_time);\
                    cout << msg_size << 
\f0\b \cf3 ","
\f1\b0 \cf4  << num_messages << 
\f0\b \cf3 ","
\f1\b0 \cf4  << delay_time << 
\f0\b \cf3 ","
\f1\b0 \cf4  << duration.count() << endl;\
                \}\
            \}\
        \}\
    \}\
\
    MPI_Finalize();\
    \cf7 return\cf4  0;\
\}\
\
}