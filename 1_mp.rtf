{\rtf1\ansi\ansicpg1251\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red46\green174\blue187;\red159\green160\blue28;\red0\green0\blue0;
\red47\green180\blue29;\red200\green20\blue201;\red20\green153\blue2;}
{\*\expandedcolortbl;;\cssrgb\c20196\c73240\c78250;\cssrgb\c68468\c68012\c14208;\csgray\c0;
\cssrgb\c20238\c73898\c14947;\cssrgb\c83396\c23075\c82664;\cssrgb\c0\c65000\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs22 \cf2 \CocoaLigature0 #include\cf3  <iostream>
\f1\b0 \cf4 \

\f0\b \cf2 #include\cf3  <vector>
\f1\b0 \cf4 \

\f0\b \cf2 #include\cf3  <climits>
\f1\b0 \cf4 \

\f0\b \cf2 #include\cf3  <omp.h>
\f1\b0 \cf4 \

\f0\b \cf2 #include\cf3  <chrono>
\f1\b0 \cf4 \

\f0\b \cf2 #include\cf3  <random>
\f1\b0 \cf4 \

\f0\b \cf2 #include\cf3  <fstream>
\f1\b0 \cf4 \
\
\cf5 using\cf4  \cf5 namespace\cf4  std;\
\
\cf5 double\cf4  get_min(vector<\cf5 double\cf4 > a) \{\
    \cf5 double\cf4  min_ = a[0];\

\f0\b \cf2     #pragma omp parallel for reduction(min: min_)
\f1\b0 \cf4 \
    
\f0\b \cf3 for
\f1\b0 \cf4  (\cf5 int\cf4  i = 1; i < a.size(); ++i) \{\
        
\f0\b \cf3 if
\f1\b0 \cf4  (a[i] < min_) \{\
            min_ = a[i];\
        \}\
    \}\
    \cf6 return\cf4  min_;\
\}\
\
\cf5 int\cf4  main() \{\
\
    random_device rd;\
    mt19937 gen(rd());\
    uniform_real_distribution<\cf5 double\cf4 > dis(0.0, 1.0);\
    ofstream file;\
    file.open (
\f0\b \cf3 "1_3.csv"
\f1\b0 \cf4 );\
    
\f0\b \cf3 for
\f1\b0 \cf4 (\cf5 int\cf4  i = 10; i <= 10000000; i*=10) \{\
        \cf5 int\cf4  size = i;\
        vector<\cf5 double\cf4 > vec(size);\
        
\f0\b \cf3 for
\f1\b0 \cf4  (\cf5 int\cf4  j = 0; j < size; ++j) \{\
            vec[j] = dis(gen);\
        \}\cb7  \cb1 \
        
\f0\b \cf3 for
\f1\b0 \cf4  (\cf5 int\cf4  j = 1; j <= 16; j+=1) \{\
            omp_set_num_threads(j);\cb7  \cb1 \
            \cf5 auto\cf4  start_time = chrono::high_resolution_clock::now();\
            \cf5 double\cf4  d = get_min(vec);\
            \cf5 auto\cf4  end_time = chrono::high_resolution_clock::now();\
            \cf5 auto\cf4  duration = chrono::duration_cast<chrono::microseconds>(end_time - start_time);\
            file << duration.count() << 
\f0\b \cf6 ','
\f1\b0 \cf4 ;\cb7  \cb1 \
        \}\
        file << 
\f0\b \cf6 '\\n'
\f1\b0 \cf4 ;\
    \}\
\
    file.close();\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cb7     \cb1 \
    \cf6 return\cf4  0;\
\}\
}