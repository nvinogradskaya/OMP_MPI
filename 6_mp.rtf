{\rtf1\ansi\ansicpg1251\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red46\green174\blue187;\red159\green160\blue28;\red0\green0\blue0;
\red47\green180\blue29;\red200\green20\blue201;\red20\green153\blue2;}
{\*\expandedcolortbl;;\cssrgb\c20196\c73240\c78250;\cssrgb\c68468\c68012\c14208;\csgray\c0;
\cssrgb\c20238\c73898\c14947;\cssrgb\c83396\c23075\c82664;\cssrgb\c0\c65000\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs22 \cf2 \CocoaLigature0 #include\cf3  <iostream>
\f1\b0 \cf4 \

\f0\b \cf2 #include\cf3  <vector>
\f1\b0 \cf4 \

\f0\b \cf2 #include\cf3  <climits>
\f1\b0 \cf4 \

\f0\b \cf2 #include\cf3  <omp.h>
\f1\b0 \cf4 \

\f0\b \cf2 #include\cf3  <chrono>
\f1\b0 \cf4 \

\f0\b \cf2 #include\cf3  <random>
\f1\b0 \cf4 \

\f0\b \cf2 #include\cf3  <fstream>
\f1\b0 \cf4 \
\
\cf5 using\cf4  \cf5 namespace\cf4  std;\
\
\cf5 double\cf4  minmax(vector<vector<\cf5 double\cf4 >> matrix, \cf5 int\cf4  n) \{\
    \cf5 double\cf4  max_ = matrix[0][0];\
\
    
\f0\b \cf3 for
\f1\b0 \cf4  (\cf5 int\cf4  i = 0; i < n; ++i) \{\
        \cf5 double\cf4  min_ = matrix[i][0];\
        
\f0\b \cf3 for
\f1\b0 \cf4  (\cf5 int\cf4  j = 0; j < n; ++j) \{\
            min_ = min(min_, matrix[i][j]);\
        \}\
        max_ = max(max_, min_);\
    \}\
    \cf6 return\cf4  max_;\
\}\
\
\cf5 double\cf4  reduction_minmax(vector<vector<\cf5 double\cf4 >> matrix, \cf5 int\cf4  n) \{\
    \cf5 double\cf4  max_ = matrix[0][0];\
\

\f0\b \cf2     #pragma omp parallel for reduction(max: max_)
\f1\b0 \cf4 \
    
\f0\b \cf3 for
\f1\b0 \cf4  (\cf5 int\cf4  i = 0; i < n; ++i) \{\
        \cf5 double\cf4  min_ = matrix[i][0];\
        
\f0\b \cf3 for
\f1\b0 \cf4  (\cf5 int\cf4  j = 0; j < n; ++j) \{\
            min_ = min(min_, matrix[i][j]);\
        \}\
        max_ = max(max_, min_);\
    \}\
    \cf6 return\cf4  max_;\
\}\
\
\
\cf5 double\cf4  critical_minmax(vector<vector<\cf5 double\cf4 >> matrix, \cf5 int\cf4  n) \{\
    \cf5 double\cf4  max_ = matrix[0][0];\
\

\f0\b \cf2     #pragma omp parallel for shared(matrix)
\f1\b0 \cf4 \
    
\f0\b \cf3 for
\f1\b0 \cf4  (\cf5 int\cf4  i = 0; i < n; ++i) \{\
        \cf5 double\cf4  min_ = matrix[i][0];\
        
\f0\b \cf3 for
\f1\b0 \cf4  (\cf5 int\cf4  j = 0; j < n; ++j) \{\
            min_ = min(min_, matrix[i][j]);\
        \}\

\f0\b \cf2         #pragma omp critical
\f1\b0 \cf4 \
        max_ = max(max_, min_);\
    \}\
    \cf6 return\cf4  max_;\
\}\
\
\cf5 double\cf4  lock_minmax(vector<vector<\cf5 double\cf4 >> matrix, \cf5 int\cf4  n) \{\
    \cf5 omp_lock_t\cf4  lock;\
    omp_init_lock(&lock);\
\
    \cf5 double\cf4  max_ = matrix[0][0];\
\

\f0\b \cf2     #pragma omp parallel for shared(matrix)
\f1\b0 \cf4 \
    
\f0\b \cf3 for
\f1\b0 \cf4  (\cf5 int\cf4  i = 0; i < n; ++i) \{\
        \cf5 double\cf4  min_ = matrix[i][0];\
        
\f0\b \cf3 for
\f1\b0 \cf4  (\cf5 int\cf4  j = 0; j < n; ++j) \{\
            min_ = min(min_, matrix[i][j]);\
        \}\
        omp_set_lock (&lock);\
            max_ = max(max_, min_);\
        omp_unset_lock (&lock);\
    \}\
    \cf6 return\cf4  max_;\
\}\
\
\cf5 int\cf4  main() \{\
\
    srand(static_cast<\cf5 unsigned\cf4  \cf5 int\cf4 >(time(0)));\
\
    ofstream file;\
    file.open (
\f0\b \cf3 "6_1.csv"
\f1\b0 \cf4 );\cb7  \cb1 \
\
\
    \cf5 int\cf4  n = 1000;\
\
    vector<vector<\cf5 double\cf4 >> matrix(n);\
    
\f0\b \cf3 for
\f1\b0 \cf4  (\cf5 int\cf4  i = 0; i < n; ++i) \{\
        
\f0\b \cf3 for
\f1\b0 \cf4  (\cf5 int\cf4  j = 0; j < n; ++j) \{\
            matrix[i].push_back(rand() % 100 + 1);\
        \}\
    \}\cb7  \cb1 \
\
    
\f0\b \cf3 for
\f1\b0 \cf4  (\cf5 int\cf4  j = 1; j <= 16; ++j) \{\
        omp_set_num_threads(j);\cb7  \cb1 \
\
        \cf5 auto\cf4  start_time = chrono::high_resolution_clock::now();\
        \cf5 double\cf4  d = minmax(matrix, n);\
        \cf5 auto\cf4  end_time = chrono::high_resolution_clock::now();\
        \cf5 auto\cf4  duration = chrono::duration_cast<chrono::microseconds>(end_time - start_time);\
        file << duration.count() << 
\f0\b \cf6 ','
\f1\b0 \cf4 ;\cb7  \cb1 \
    \}\
    file << 
\f0\b \cf6 '\\n'
\f1\b0 \cf4 ;\
\
    
\f0\b \cf3 for
\f1\b0 \cf4  (\cf5 int\cf4  j = 1; j <= 16; ++j) \{\
        omp_set_num_threads(j);\cb7  \cb1 \
\
        \cf5 auto\cf4  start_time = chrono::high_resolution_clock::now();\
        \cf5 double\cf4  d = reduction_minmax(matrix, n);\
        \cf5 auto\cf4  end_time = chrono::high_resolution_clock::now();\
        \cf5 auto\cf4  duration = chrono::duration_cast<chrono::microseconds>(end_time - start_time);\
        file << duration.count() << 
\f0\b \cf6 ','
\f1\b0 \cf4 ;\cb7  \cb1 \
    \}\
\
    file << 
\f0\b \cf6 '\\n'
\f1\b0 \cf4 ;\
\
    
\f0\b \cf3 for
\f1\b0 \cf4  (\cf5 int\cf4  j = 1; j <= 16; ++j) \{\
        omp_set_num_threads(j);\cb7  \cb1 \
\
        \cf5 auto\cf4  start_time = chrono::high_resolution_clock::now();\
        \cf5 double\cf4  d = critical_minmax(matrix, n);\
        \cf5 auto\cf4  end_time = chrono::high_resolution_clock::now();\
        \cf5 auto\cf4  duration = chrono::duration_cast<chrono::microseconds>(end_time - start_time);\
        file << duration.count() << 
\f0\b \cf6 ','
\f1\b0 \cf4 ;\cb7  \cb1 \
    \}\
\
    file << 
\f0\b \cf6 '\\n'
\f1\b0 \cf4 ;\
\
    
\f0\b \cf3 for
\f1\b0 \cf4  (\cf5 int\cf4  j = 1; j <= 16; ++j) \{\
        omp_set_num_threads(j);\cb7  \cb1 \
\
        \cf5 auto\cf4  start_time = chrono::high_resolution_clock::now();\
        \cf5 double\cf4  d = lock_minmax(matrix, n);\
        \cf5 auto\cf4  end_time = chrono::high_resolution_clock::now();\
        \cf5 auto\cf4  duration = chrono::duration_cast<chrono::microseconds>(end_time - start_time);\
        file << duration.count() << 
\f0\b \cf6 ','
\f1\b0 \cf4 ;\cb7  \cb1 \
    \}\
\
    file.close();\
\}}